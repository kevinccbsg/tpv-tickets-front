
name: Development CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: europe-west1-c
  IMAGE: tpv-frontend
  REGISTRY_HOSTNAME: eu.gcr.io
  DEPLOYMENT_NAME: tpv-frontend
  GKE_CLUSTER: tpv-gke-cluster

jobs:
  tests:
    if: ${{ github.ref != 'refs/heads/master' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.4]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint
    - run: npm run test:unit -- --ci

  cypress-run:
    if: ${{ github.ref != 'refs/heads/master' }}
    runs-on: ubuntu-16.04

    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 10.x
      uses: actions/setup-node@v1
      with:
        node-version: 10.x
    - run: npm ci
    - run: npm run serve &
    # https://github.com/cypress-io/github-action
    - name: Cypress run
      uses: cypress-io/github-action@v1
      with:
        record: true
        parallel: true
        working-directory: UI-e2e
        wait-on: 'http://localhost:8080'
        group: 'Github Actions'
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        # Recommended: pass the GitHub token lets this action correctly
        # determine the unique run id necessary to re-run the checks
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    name: Build Publish image, and Deploy on Dev Environment

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}
        export_default_credentials: true

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - name: Build
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

    # Get secrets from vault
    - id: secrets
      uses: GoogleCloudPlatform/github-actions/get-secretmanager-secrets@master
      with:
        secrets: |-
          apiUrl:${{ secrets.GKE_PROJECT }}/DEV_API_URL

    # Set up kustomize
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
        chmod u+x ./kustomize
        ./kustomize version

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        cd deployment && ../kustomize edit set image $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA} && cd ..
        cat deployment/kustomization.yml
        cat <<EOF >>deployment/kustomization.yml
        replicas:
        - name: $DEPLOYMENT_NAME
          count: 2
        EOF
        cat <<EOF >>deployment/kustomization.yml
        namespace: development
        EOF
        cat <<EOF >>deployment/kustomization.yml
        secretGenerator:
        - name: tpv-frontend-secret
          literals:
          - API_URL=${{ steps.secrets.outputs.apiUrl }}
        EOF
        ./kustomize build deployment | kubectl apply -f -
        kubectl get services -o wide
